diff -ur aMule-AdunanzA-2010.1-2.2.6/src/ClientTCPSocket.cpp amule-adunanza//src/ClientTCPSocket.cpp
--- aMule-AdunanzA-2010.1-2.2.6/src/ClientTCPSocket.cpp	2010-02-03 18:14:39.000000000 +0100
+++ amule-adunanza//src/ClientTCPSocket.cpp	2010-04-13 21:32:02.333156656 +0200
@@ -1117,6 +1117,28 @@
 		throw wxString(wxT("Client send extended packet before finishing handshake"));
 	}
 	*/
+// ADUNANZA BEGIN
+	// probabile casino con KADU opcode (anche se pensavo riguardassero solo l'UDP...) in caso di connessioni offuscate
+	// Notare che a questo punto posso solo essere sicuro dell'IP (potrebbe essere un pacchetto AdunanzA ma potrei
+	// non aver ancora concluso "l'handshaking"), scelgo quindi di scartare tutti i pacchetti da rete Fastweb
+	// con opcode kadOpcode o kadZOpcode.
+	// Questo rientra nella categoria "tapulli" (= soluzione temporanea di emergenza!)
+	
+	 // bool bSkipMe(false);
+	// std::wclog << L"Mr Hyde DBG: IP <" << m_client->GetFullIP() << L"> opcode <" << opcode << L"> size " << size << std::endl;
+	if (thePrefs::IsClientCryptLayerSupported() && thePrefs::IsClientCryptLayerRequested() && thePrefs::IsClientCryptLayerRequired()) {
+		if ((opcode == theApp->get_kadOpcode()) || (opcode == theApp->get_kadZOpcode())) {
+			if (m_client->IsFastweb()) {
+				// std::wclog << L"Mr Hyde DBG: skip TCP extended packet (ADU opcode) IP <" << m_client->GetFullIP() << L"> opcode <" << opcode << L"> size " << size << std::endl;
+				theStats::AddDownOverheadOther(size);
+				return true;
+				
+
+				// bSkipMe = true;
+			}
+		}
+	}
+// ADUNANZA END			
 	switch(opcode) {
 		case OP_MULTIPACKET_EXT:
 			AddDebugLogLineM( false, logRemoteClient, wxT("Remote Client: OP_MULTIPACKET_EXT from ") + m_client->GetFullIP());
diff -ur aMule-AdunanzA-2010.1-2.2.6/src/DownloadQueue.cpp amule-adunanza//src/DownloadQueue.cpp
--- aMule-AdunanzA-2010.1-2.2.6/src/DownloadQueue.cpp	2010-02-03 18:14:39.000000000 +0100
+++ amule-adunanza//src/DownloadQueue.cpp	2010-04-13 21:32:02.349823603 +0200
@@ -89,6 +89,11 @@
 	m_dwNextTCPSrcReq = 0;
 	m_cRequestsSentToServer = 0;
 	m_lastDiskCheck = 0;
+// ADUNANZA BEGIN
+// Per ripartitore di banda di Tiger (credo)	
+	m_ADU_ext_datarate = 0;
+	m_ADU_kadu_datarate = 0;
+// ADUNANZA END	
 	SetLastKademliaFileRequest();
 }
 
@@ -412,7 +417,10 @@
 			if (theMaxDownload != UNLIMITED) { // probabilmente inutile, messo per sicurezza
 				extMaxDown = std::min<uint64>(theMaxDownload, extMaxDown);
 			}
+
 			ADU_ext_downspeed = (((uint32)extMaxDown)*1024*100)/(m_ADU_ext_datarate+1); 
+			// ADU_ext_downspeed = (uint32)((extMaxDown*1024*100)/(m_ADU_ext_datarate+1)); 
+
 			if (ADU_ext_downspeed < 50) {
 				ADU_ext_downspeed = 50;
 			} else if (ADU_ext_downspeed > 200) {
@@ -422,12 +430,19 @@
 
 
 		uint32 ADU_kadu_downspeed = 0;
+
 		uint64 kaduMaxDown = thePrefs::ADU_GetKaduMaxDown(); 
 		if ( kaduMaxDown != UNLIMITED && m_ADU_kadu_datarate > 1500) {
 			if (theMaxDownload != UNLIMITED) {// probabilmente inutile, messo per sicurezza
 				kaduMaxDown = std::min<uint64>(theMaxDownload, kaduMaxDown);
 			}
-			ADU_kadu_downspeed = (((uint32)kaduMaxDown)*1024*100)/(m_ADU_kadu_datarate+1); 
+			ADU_kadu_downspeed = (((uint32)kaduMaxDown)*1024*100)/(m_ADU_kadu_datarate+1);
+			/*
+			uint32 num = (uint32) (kaduMaxDown*1024*100);
+			uint32 denum = (1+m_ADU_kadu_datarate);
+			ADU_kadu_downspeed = (num > denum) ? (num/denum) : 0;
+		       	*/
+
 			if (ADU_kadu_downspeed < 50) {
 				ADU_kadu_downspeed = 50;
 			} else if (ADU_kadu_downspeed > 200) {

diff -ur aMule-AdunanzA-2010.1-2.2.6/src/webserver/src/WebServer.h amule-adunanza//src/webserver/src/WebServer.h
--- aMule-AdunanzA-2010.1-2.2.6/src/webserver/src/WebServer.h	2010-02-03 18:14:39.000000000 +0100
+++ amule-adunanza//src/webserver/src/WebServer.h	2010-04-13 21:32:01.382324912 +0200
@@ -154,7 +154,15 @@
 class SearchFile {
 	public:
 		wxString sFileName;
+// ADUNANZA BEGIN
+// Patch di Taganaka per bugfix su ricerche file di dimensioni
+// maggiori di 4 giga
+#if 0
 		unsigned long lFileSize;
+#else
+		uint64        lFileSize;
+#endif
+// ADUNANZA END
 		CMD4Hash  nHash;
 		wxString  sHash;
 		long lSourceCount;
